// deno-lint-ignore-file no-explicit-any
import type { OpenAPI, OpenAPIDefaultSchema } from "@/src/OpenAPI/index.ts";
import { z } from "zod";
import type { NewEndpointParams, OpenAPIParams } from "@/src/OpenAPI/index.ts";

class YelixOpenAPI {
  _openAPI: OpenAPI | null = null;
  private customValidationDescriptions: Record<string, (_: any) => string> = {};

  constructor(params: OpenAPIParams) {
    this._openAPI = {
      openapi: "3.1.0",
      info: {
        title: params.title,
        version: params.version,
        description: params.description || "Yelix API Documentation",
      },
      paths: {},
      servers: params.servers || [],
    };
  }

  customValidationDescription(kind: string, fn: (_: any) => string): boolean {
    let isOverriding = false;

    if (this.customValidationDescriptions[kind]) {
      isOverriding = true;
    }

    this.customValidationDescriptions[kind] = fn;
    return isOverriding;
  }

  getCustomValidationDescription(kind: string): (_: any) => string {
    return this.customValidationDescriptions[kind];
  }

  getJSON(): OpenAPI {
    return this._openAPI!;
  }

  private generateExample(schema: z.ZodTypeAny): any {
    if (schema instanceof z.ZodString) return "example string";
    if (schema instanceof z.ZodNumber) return 42;
    if (schema instanceof z.ZodBoolean) return true;
    if (schema instanceof z.ZodLiteral) return schema._def.value;
    if (schema instanceof z.ZodEnum) return schema._def.values[0];
    if (schema instanceof z.ZodArray) {
      return [this.generateExample(schema._def.type)];
    }
    if (schema instanceof z.ZodObject) {
      const example: Record<string, any> = {};
      for (const key in schema.shape) {
        example[key] = this.generateExample(schema.shape[key]);
      }
      return example;
    }
    if (schema instanceof z.ZodOptional || schema instanceof z.ZodNullable) {
      return this.generateExample(schema._def.innerType);
    }
    return null;
  }

  private zodToJsonSchema(zodSchema: z.ZodTypeAny): OpenAPIDefaultSchema {
    if (!zodSchema) return { type: "object" };
    if (zodSchema instanceof z.ZodObject) {
      const properties: Record<string, OpenAPIDefaultSchema> = {};
      Object.entries(zodSchema.shape).forEach(([key, value]) => {
        properties[key] = this.zodToJsonSchema(value as z.ZodTypeAny);
      });
      return { type: "object", properties };
    }
    return { type: "string" };
  }

  addNewEndpoint(apiDoc: NewEndpointParams) {
    if (!this._openAPI) {
      throw new Error("OpenAPI not initialized");
    }

    const { path, method } = apiDoc;
    const defaultSummary = `${method.toUpperCase()} ${path}`;

    const responses: Record<string, any> = {};
    const responseStatusCodes = Object.keys(apiDoc.responses || {});
    for (const statusCode of responseStatusCodes) {
      const response = apiDoc.responses![statusCode];

      responses[statusCode] = {
        description: response.description,
        content: {
          [response.type]: {
            schema: this.zodToJsonSchema(response.zodSchema || z.string()),
            examples: {
              autoGenerated: this.generateExample(
                response.zodSchema || z.string(),
              ),
            },
          },
        },
      };
    }

    const parameters = [];
    const queries = apiDoc.validation?.query;
    if (queries) {
      for (const key in queries) {
        const query = queries[key];
        const queryDescription = apiDoc.query?.[key]?.description;
        let queryDefaultDescription = ""; // Markdown

        if (query instanceof z.ZodType && query._def?.checks?.length > 0) {
          queryDefaultDescription += "###### Validation Rules\n";
        }

        if (query instanceof z.ZodType) {
          const zodRules = query._def.checks || [];
          for (const rule of zodRules) {
            const customDescription = this.getCustomValidationDescription(
              rule.kind,
            );

            if (customDescription) {
              queryDefaultDescription += customDescription(rule);
            } else {
              queryDefaultDescription += "- " + rule.kind +
                (rule.value ? ": " + rule.value : "") + "\n";
            }
          }
        }

        parameters.push({
          name: key,
          in: "query",
          required: !(query instanceof z.ZodOptional),
          schema: this.zodToJsonSchema(query as z.ZodTypeAny),
          description: queryDescription || queryDefaultDescription,
        });
      }
    }

    const lowerMethod = method.toLowerCase();
    this._openAPI.paths![path] = {
      [lowerMethod]: {
        tags: apiDoc.tags || [],
        summary: apiDoc.title || defaultSummary,
        description: apiDoc.description || "",
        responses: responses,
        parameters,
      },
    };
  }
}

export { YelixOpenAPI };
